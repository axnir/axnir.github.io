<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>&lt;React Hooks之useEffect&gt;</title>
    <link href="/2021/01/31/React-Hooks%E4%B9%8BuseEffect/"/>
    <url>/2021/01/31/React-Hooks%E4%B9%8BuseEffect/</url>
    
    <content type="html"><![CDATA[<p>有关useEffect的一些问题。</p><ol><li><p>组件内的每一个函数（包括事件处理函数，effects，定时器或者API调用等等）会捕获定义它们的那次渲染中的props和state。</p></li><li><p>依赖项需要如实填写，如果设置了依赖项，effect中用到的所有组件内的值都要包含在依赖中。包括props，state，函数 — <strong>组件</strong>内的任何东西。</p><ul><li><p>当effect中需要用到上一次的state值，可以使用<code>useState</code>的函数形式。</p><p>  举个栗子🌰️：</p><p>  在<code>useEffect</code>中设置一个定时器，每过一秒count的值就+1，有两种实现形式。</p><ul><li><p>第一种：</p><pre><code class="hljs jsx">useEffect(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;      setCount(count + <span class="hljs-number">1</span>);    &#125;, <span class="hljs-number">1000</span>);    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">clearInterval</span>(id);  &#125;, [count]);</code></pre></li><li><p>第二种：</p><pre><code class="hljs jsx">useEffect(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">const</span> id = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;      setCount(<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> c + <span class="hljs-number">1</span>);    &#125;, <span class="hljs-number">1000</span>);    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">clearInterval</span>(id);  &#125;, []);</code></pre><p>这两种形式虽然都可以完成任务，但是第一种方法的定时器每次都会在count改变后清除和重新设定，而第二种方法却不需要。</p></li></ul></li><li><p>函数可以成为依赖，对于<code>useEffect</code>中的函数依赖，有以下几种解决措施：</p><ul><li><p>第一种：如果某些函数仅在effect中调用，你可以把它们的定义移到effect中。</p></li><li><p>第二种：不止在effect中调用，但是这个函数没有使用组件内的任何值，可以将函数放到组件外面定义。</p></li><li><p>第三种：不止在effect中调用，可以将这个函数使用<code>useCallback</code>进行包装</p></li></ul></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/11/17/hello-world/"/>
    <url>/2020/11/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
